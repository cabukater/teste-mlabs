import { of } from 'rxjs';
import { Validators } from '@angular/forms';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { LikertJ, LikertResults } from 'likert.model.ts';
import { LikertJService } from 'likert-j.service.ts';
import { LikertRService } from 'likert-r.service.ts';
import { ModalAlertsComponent } from 'modalAlertComponent.ts';
import { ModalEditComponent } from 'modalComponent.ts';

import { LikertComponent } from './likert.component';

describe('LikertComponent', () => {
  let component: LikertComponent;
  let likertJService: Partial<LikertJService>;
  let likertRService: Partial<LikertRService>;
  let formBuilder: any;
  let modalService: Partial<BsModalService>;
  let bsModalRef: Partial<BsModalRef>;
  let likertList$: any;
  let likertResults$: any;

  beforeEach(() => {
    likertJService = {
      insertJ: jest.fn(),
      getList: jest.fn(),
      delete: jest.fn()
    };
    likertRService = {
      getList: jest.fn()
    };
    formBuilder = {
      group: jest.fn()
    };
    modalService = {
      show: jest.fn()
    };
    bsModalRef = {
      content: { confirm: of(true) },
      onHidden: of(null)
    };
    likertList$ = of([]);
    likertResults$ = of([]);
    component = new LikertComponent(
      likertJService as LikertJService,
      likertRService as LikertRService,
      formBuilder,
      modalService as BsModalService
    );
  });

  describe('ngOnInit()', () => {
    beforeEach(() => {
      jest.spyOn(component, 'formConst').mockImplementation(() => {});
      jest.spyOn(likertJService, 'getList').mockReturnValueOnce(likertList$);
      jest.spyOn(likertRService, 'getList').mockReturnValueOnce(likertResults$);
    });

    it('should call formConst() and getList() on LikertJService and LikertRService', () => {
      component.ngOnInit();
      expect(component.formConst).toHaveBeenCalled();
      expect(likertJService.getList).toHaveBeenCalled();
      expect(likertRService.getList).toHaveBeenCalled();
      expect(component.likertList$).toBe(likertList$);
      expect(component.likertResults$).toBe(likertResults$);
    });
  });

  describe('touchInput()', () => {
    beforeEach(() => {
      component.likertForm = {
        get: jest.fn().mockReturnValue({ markAsTouchhed: jest.fn() })
      } as any;
    });

    it('should mark control as touched', () => {
      component.touchInput('name');
      expect(component.likertForm?.get).toHaveBeenCalledWith('name');
      expect(component.likertForm?.get('name')?.markAsTouchhed).toHaveBeenCalled();
    });

    it('should do nothing if control is not found', () => {
      component.touchInput('invalid');
      expect(component.likertForm?.get).toHaveBeenCalledWith('invalid');
      expect(component.likertForm?.get('invalid')).toBeUndefined();
    });
  });


